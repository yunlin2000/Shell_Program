





sed实例：
 #将文件中空白字符开头的行，添加注释符
[ops@Server Shell_Programs]$ cat lovers.txt -n
     1   I like my lover.
     2  I love my lover.
     3  He likes his lovers.
     4   He loves his lovers.
     5  #she loves her cat
     6  i want ride my bike
    7
     8
     9  
[ops@Server Shell_Programs]$ sed 's/^[[:space:]]/#/g' lovers.txt -n
#I like my lover.
#He loves his lovers.
[ops@Server Shell_Programs]$ #把开头空白的行和空行进行注释
[ops@Server Shell_Programs]$ cat lovers.txt -n
     1   I like my lover.
     2  I love my lover.
     3  He likes his lovers.
     4   He loves his lovers.
     5  #she loves her cat
     6  i want ride my bike
     7
     8
     9  
[ops@Server Shell_Programs]$ sed -e 's/^[[:space:]]/#/p' -e 's/^$/#/p' lovers.txt -n
#I like my lover.
#He loves his lovers.
#
#
#

[ops@Server Shell_Programs]$ # 删除文件的空白和注释行
[ops@Server Shell_Programs]$ cat lovers.txt -n
     1   I like my lover.
     2  I love my lover.
     3  He likes his lovers.
     4   He loves his lovers.
     5  #she loves her cat
     6  i want ride my bike
     7
     8
     9
[ops@Server Shell_Programs]$ sed -e '/^#/d' -e '/^$/d' lovers.txt
 I like my lover.
I love my lover.
He likes his lovers.
 He loves his lovers.
i want ride my bike
[ops@Server Shell_Programs]$ sed '/^#/d;/^$/d' lovers.txt    #也可以把正则写在一起，用；隔开
 I like my lover.
I love my lover.
He likes his lovers.
 He loves his lovers.
i want ride my bike

#给文件的前三行，添加@符号
[ops@Server Shell_Programs]$ cat lovers.txt
 I like my lover.
I love my lover.
He likes his lovers.
 He loves his lovers.
#she loves her cat
i want ride my bike


[ops@Server Shell_Programs]$ sed -r '1,3s/(^.)/@\1/' lovers.txt
@ I like my lover.
@I love my lover.
@He likes his lovers.
 He loves his lovers.
#she loves her cat
i want ride my bike



#取出ip地址
ip add show dev ens33
2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:c9:e5:a9 brd ff:ff:ff:ff:ff:ff
    inet 192.168.227.141/24 brd 192.168.227.255 scope global dynamic ens33
       valid_lft 1414sec preferred_lft 1414sec
    inet6 fe80::e5f0:b665:fb32:aa47/64 scope link
       valid_lft forever preferred_lft forever
 ip address show dev ens33|sed '3s/^.*inet//;3s/brd.*$//p' -n
 192.168.227.141/24
 #找出系统版本号
cat /etc/redhat-release
Red Hat Enterprise Linux Server release 7.4 (Maipo)
[ops@Server Shell_Programs]$ sed -r 's/^.*release[[:space:]]*([^.]+).*/\1/p' /etc/redhat-release -n
7

#awk实例
#在当前系统中打印出所有普通用户的用户和家目录（/etc/passwd）
cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
nobody:x:99:99:Nobody:/:/sbin/nologin
systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
dbus:x:81:81:System message bus:/:/sbin/nologin
polkitd:x:999:997:User for polkitd:/:/sbin/nologin
postfix:x:89:89::/var/spool/postfix:/sbin/nologin
chrony:x:998:996::/var/lib/chrony:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
ops:x:1000:1000:ops:/home/ops:/bin/bash
ops1:x:1001:1001::/home/ops1:/bin/bash
ops2:x:1002:1002::/home/ops2:/bin/bash
test:x:1003:1003::/home/test:/bin/bash

[ops@Server Shell_Programs]$ awk -F: '$3>=1000{print $1,$(NF-1)}' /etc/passwd
ops /home/ops
ops1 /home/ops1
ops2 /home/ops2
test /home/test

 #给chaoge2.txt前5行加#符号
[ops@Server Shell_Programs]$ cat chaoge2.txt -n
     1  爱的魔力转圈圈1 爱的魔力转圈圈2 爱的魔力转圈圈3
     2  爱的魔力转圈圈4 爱的魔力转圈圈5 爱的魔力转圈圈6
     3  爱的魔力转圈圈7 爱的魔力转圈圈8 爱的魔力转圈圈9
     4  爱的魔力转圈圈10 爱的魔力转圈圈11 爱的魔力转圈圈12
     5  爱的魔力转圈圈13 爱的魔力转圈圈14 爱的魔力转圈圈15
     6  爱的魔力转圈圈16 爱的魔力转圈圈17 爱的魔力转圈圈18
     7  爱的魔力转圈圈19 爱的魔力转圈圈20

 awk 'NR<6{print "#"$0}' chaoge2.txt
#爱的魔力转圈圈1 爱的魔力转圈圈2 爱的魔力转圈圈3
#爱的魔力转圈圈4 爱的魔力转圈圈5 爱的魔力转圈圈6
#爱的魔力转圈圈7 爱的魔力转圈圈8 爱的魔力转圈圈9
#爱的魔力转圈圈10 爱的魔力转圈圈11 爱的魔力转圈圈12
#爱的魔力转圈圈13 爱的魔力转圈圈14 爱的魔力转圈圈15

 #显示tel.txt中所有电话号码并且去除空行
 cat tel.txt
Mike Harrington:[510] 548-1278:250:100:175

Christian Dobbins:[408] 538-2358:155:90:201

Susan Dalsass:[206]654-6279:250:60:50

Archie McNichol:[206] 548-1348:250:100:175

Jody Savage:[206]548-1278:15:188:150

Guy Quigley:[916]343-6410:250:100:175

Dan Savage:[406] 298-7744:450:300:275

Nancy McNeil:[206]548-1278:250:80:75

John Goldenrod:[916] 348-4278:250:100:175

Chet Main:[510] 548-5258:50:95:135

awk -F "[ :]" '!/^[[:space:]]*$/{print $4}' tel.txt
548-1278
538-2358
654-6279
548-1348
548-1278
343-6410
298-7744
548-1278
348-4278
548-5258
926-3456
440-1763





20240422：
案例03:取出stat /etc/hosts中的0644或644
[root@chaogelinux log]# stat /etc/hosts
  文件："/etc/hosts"
  大小：158             块：8          IO 块：4096   普通文件
设备：fd00h/64768d      Inode：16784041    硬链接：1
权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)
环境：system_u:object_r:net_conf_t:s0
最近访问：2024-04-22 07:27:08.664045499 +0800
最近更改：2013-06-07 22:31:32.000000000 +0800
最近改动：2024-03-22 07:39:40.488233554 +0800
创建时间：-
[root@chaogelinux log]# stat /etc/hosts|sed -n '4p'
权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)
[root@chaogelinux log]# stat /etc/hosts|sed -n '4p'|sed -r 's#^.*\(([0-9]+).*$#\1#g'

##排除/etc/ssh/sshd_config(先复制到用户家目录)文件中的空行和以#开头的行
su root
cp /etc/ssh/sshd_config sshd_config
1.egrep
egrep -v '^$|^#' sshd_config   #-v:反转
2.sed
sed -r '/^$|^#/d' sshd_config    #-r:扩展正则，因为用到|，它属于扩展正则符号
3.awk
awk '!/^$|^#/'  sshd_config   #！：取反含义
##增删改查之增加
#在sed.txt文件第3行后增加一行
[root@chaogelinux Shell_Program]# sed '3a 999,lidao007,UFO' sed.txt     #a:append追加的含义，在指定行后增加一行内容
101,oldboy,CEO
102,oldbao.CTO
103,abd,CIO
999,lidao007,UFO
104,yy,CFO
105,feixue.CIO
110,oldboy.COCO
#在sed.txt文件第3行之前增加一行
[root@chaogelinux Shell_Program]# sed '3i 999,lidao007,UFO' sed.txt     #i:insert在指定行之前增加一行
101,oldboy,CEO
102,oldbao.CTO
999,lidao007,UFO
103,abd,CIO
104,yy,CFO
105,feixue.CIO
110,oldboy.COCO
##替换sed.txt文件第3行为
 [root@chaogelinux Shell_Program]# sed '3c 999,lidao007,UFO' sed.txt     #c:replace替换为
101,oldboy,CEO
102,oldbao.CTO
999,lidao007,UFO
104,yy,CFO
105,feixue.CIO
110,oldboy.COCO

##sed总结
1.sed查找与替换
2.sed后向引用
3.sed增加
4.sed删除
sed过滤，替换
正则：^    $    ^$     .*     []+     |
过滤：	行号，行号范围
	模糊过滤或查询
	模糊范围
替换：
	格式：‘s###g’
	修改文件内容 -i   -i.bak
	反向引用（后向引用）
		类似于awk取列，取出某行中指定内容
		本质：通过正则进行匹配，通过()进行分组，在后面使用\1 \数字获取前面分组的内容（最多9个分组）。
删除：d,删除一行
增加：cai
	a  append    #如果增加多行，加上\n即可
	i   insert
	c  replace
选项：
	-n	#关闭默认显示
	-i 	-i.bak   #修改文件和备份
	-r	#使用扩展正则


awk使用实例：
#案例01：取出/etc/passwd文件中的第一行
awk 'NR==1{print $0}' /etc/passwd    
root:x:0:0:root:/root:/bin/bash
讲解：
NR Number of Record  记录号，行号
== 表示等于
{print $0}   输出正行内容  $0表示当前行的内容。

上面例子也可简写为：
awk 'NR==1' /etc/passwd

#案例02：取出第二行到第五行的内容
awk 'NR>=2 && NR<=5' /etc/passwd
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
解析：
>=   <=    >   <   !=     ==    大于等于 小于等于...
&& 表示并且
|| 表示或者


#案例03：过滤出/etc/passwd文件中包含root或nobody的行
 awk '/root|nobody/' /etc/passwd
root:x:0:0:root:/root:/bin/bash
operator:x:11:0:operator:/root:/sbin/nologin
nobody:x:99:99:Nobody:/:/sbin/nologin
nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin
 
sed实现：
sed -r -n '/root|nobody/p' /etc/passwd
egrep实现：
 egrep 'root|nobody' /etc/passwd

 #案例04：取出从包含root的行到包含nobody的行
 awk '/root/,/nobody/' /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
nobody:x:99:99:Nobody:/:/sbin/nologin

sed实现：
sed -n -r '/root/,/nobody/p' /etc/passwd


#对列的判断，案例05：取出/etc/passwd中第三列大于等于1000的行
awk -F: '$3>=1000' /etc/passwd
ops:x:1000:1000:ops:/home/ops:/bin/bash
nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin
解析：
通过awk实现对某一列进行判断。

以上5个awk实例小结：
awk +NR 取出指定的行，指定范围的行
awk + //过滤
awk +其他变量功能用于精确过滤.(讲完取列就可以使用)


awk取列操作：
实例01： #使用awk取出ls -lh的大小列和最后一列
ls -lh | awk '{print $5,$NF}'
 12K
15 a
57 bb
3.0K pass.txt
4.0K Shell_Program

awk中 $数字，表示取列，$1 第1列 $0表示这一行
$NF 最后一列
NF Number of Field 每行有多少列
$(NF-1)取出倒数第2列，一般用于正向取列数发生变化或数字过大。
实例02：取出/etc/passwd中的第1列，第3列和最后一列
awk取列的时候，默认是通过空白符进行分割的
空白字符：空格，连续空格，tab键
但是一些时候使用默认分隔符不够了，需要我们手动指定分隔符，通过-F选项指定。
未来我们想快速取出想要的内容，选择趁手工具（选好分隔符）
选择分隔符建议：看你目标两边是啥。

 awk -F':' '{print $1,$3,$NF}' /etc/passwd|column -t
root                 	0      /bin/bash
bin                  	1      /sbin/nologin
daemon              	2      /sbin/nologin
adm                  	3      /sbin/nologin
lp                   	4      /sbin/nologin
sync                 	5      /bin/sync

|column -t 对齐

实例03：取出ip地址（指定复杂分隔符）
[ops@chaogelinux ~]$ ip a s dev ens33
2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:13:63:fc brd ff:ff:ff:ff:ff:ff
    inet 192.168.10.116/24 brd 192.168.10.255 scope global dynamic ens33
       valid_lft 4693sec preferred_lft 4693sec
    inet6 fe80::20c:29ff:fe13:63fc/64 scope link
       valid_lft forever preferred_lft forever

ip a s dev ens33|awk -F'[ /]+' 'NR==3{print $3}'
192.168.10.116


小结：
如果是空格，连续空格，直接使用awk取列即可，$1,$2,$NF
其他清空需要通过指定分隔符+正则实现  [ ]   [ ]+   |



实例04：取出/etc/hosts的权限属性
 stat /etc/passwd
  文件："/etc/passwd"
  大小：2137            块：8          IO 块：4096   普通文件
设备：fd00h/64768d      Inode：18282776    硬链接：1
权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)
环境：system_u:object_r:passwd_file_t:s0
最近访问：2024-04-24 07:32:01.001812800 +0800
最近更改：2024-04-09 11:43:37.161473728 +0800
最近改动：2024-04-09 11:43:37.162473730 +0800
创建时间：-

stat /etc/hosts|awk -F'[(/]+' 'NR==4{print $2}'
0644
解析：
‘[(/]+’   以一个或多个（或/作为分隔符

stat /etc/passwd |awk -F'[^0-9]+' 'NR==4{print $2}'
0644
解析：
'[^0-9]+'      以一个或多个非数字的字符作为分割符（^在中括号里是非，取反的意思）

实例05： 如果系统swap使用超过0则输出：异常系统开始占用swap
free |awk 'NR==3&&$3>0{print "异常系统开始占用swap"}'

free | awk '/Swap/&&$3>0{print "异常系统开始占用swap"}'


实例06：过滤出/etc/passwd第4列的数字是以0或1开头的行，输出第一列，第三列
之前^或$表示某一行的开头或结尾。
在awk中因为awk可以取列，通过列可以过滤某一列中包含什么……  过滤某一列中以xxxx开头或结尾。

awk -F: '$4 ~/^[01]/{print $1,$3}' /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin

温馨提示 awk中 通过$3 ~
	~    表示包含的意思 $1 ~ /root/   第1列中包含root  //中是正则
	!~   表示不包含

awk小结:
取行，取列可以分开,后面熟练后最好合并
·取行(条件):NR=1，NR>1, $3>1000, $3~/1/
取列(分隔符,动作):$1，$NF,$(NF-1)

awk统计与计算：
1.统计次数
##实例01：统计/etc/passwd行数
[ops@chaogelinux Shell_Program]$ awk '{i=i+1} END{print i}'   /etc/passwd
41

END｛｝内容会在awk读取完文件之后执行。
END｛｝一般用于输出执行结果。
i=i+1    ==== i++

2.计算总和
seq 10>num.txt
awk '{i=i+$1}END{print i}' num.txt
55


awk总结：
awk取行与取列
awk进行对列比较大小
awk进行对列过滤
awk计算，求和
